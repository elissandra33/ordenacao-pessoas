#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Definição da struct Pessoa
typedef struct {
    char nome[100];
    int idade;
} Pessoa;

// Número de pessoas
#define TAM 100

// Contadores globais
long long comparacoes, trocas;

// Função para trocar duas pessoas
void trocar(Pessoa *a, Pessoa *b) {
    Pessoa temp = *a;
    *a = *b;
    *b = temp;
    trocas++;
}

// Bubble Sort
void bubbleSort(Pessoa v[], int n) {
    comparacoes = trocas = 0;
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-1-i; j++) {
            comparacoes++;
            if (strcmp(v[j].nome, v[j+1].nome) > 0) {
                trocar(&v[j], &v[j+1]);
            }
        }
    }
}

// Selection Sort
void selectionSort(Pessoa v[], int n) {
    comparacoes = trocas = 0;
    for (int i = 0; i < n-1; i++) {
        int min = i;
        for (int j = i+1; j < n; j++) {
            comparacoes++;
            if (strcmp(v[j].nome, v[min].nome) < 0) {
                min = j;
            }
        }
        if (min != i) {
            trocar(&v[i], &v[min]);
        }
    }
}

// Quick Sort
void quickSort(Pessoa v[], int inicio, int fim) {
    if (inicio < fim) {
        int i = inicio, j = fim;
        Pessoa pivo = v[(inicio+fim)/2];

        while (i <= j) {
            while (strcmp(v[i].nome, pivo.nome) < 0) {
                i++; comparacoes++;
            }
            while (strcmp(v[j].nome, pivo.nome) > 0) {
                j--; comparacoes++;
            }
            if (i <= j) {
                trocar(&v[i], &v[j]);
                i++; j--;
            }
        }
        quickSort(v, inicio, j);
        quickSort(v, i, fim);
    }
}

// Função para medir o tempo médio de execução de algoritmos que recebem (Pessoa[], int)
double medirTempo(void (*sortFunc)(Pessoa[], int), Pessoa v[], int n) {
    double total = 0;
    Pessoa *copia = malloc(n * sizeof(Pessoa));

    for (int i = 0; i < 5; i++) {
        memcpy(copia, v, n * sizeof(Pessoa));

        clock_t inicio = clock();
        sortFunc(copia, n);
        clock_t fim = clock();

        total += (double)(fim - inicio) * 1000.0 / CLOCKS_PER_SEC;
    }

    free(copia);
    return total / 5.0;
}

// Função para medir tempo médio para QuickSort
double medirTempoQuickSort(Pessoa v[], int n) {
    double total = 0;
    Pessoa *copia = malloc(n * sizeof(Pessoa));

    for (int i = 0; i < 5; i++) {
        memcpy(copia, v, n * sizeof(Pessoa));
        comparacoes = trocas = 0;

        clock_t inicio = clock();
        quickSort(copia, 0, n-1);
        clock_t fim = clock();

        total += (double)(fim - inicio) * 1000.0 / CLOCKS_PER_SEC;
    }

    free(copia);
    return total / 5.0;
}

// Função para imprimir o array de pessoas
void imprimir(Pessoa v[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%s - %d\n", v[i].nome, v[i].idade);
    }
    printf("\n");
}

// Função para gerar nomes e idades aleatórias
void gerarPessoas(Pessoa v[], int n) {
    const char *nomesBase[] = {
        "Ana", "Carlos", "Beatriz", "Eduardo", "Marina", "João",
        "Lúcia", "Pedro", "Roberta", "Zeca", "Lucas", "Felipe",
        "Rafael", "Clara", "Juliana", "Fernanda", "Gustavo", "Amanda"
    };
    int totalNomes = sizeof(nomesBase) / sizeof(nomesBase[0]);

    for (int i = 0; i < n; i++) {
        sprintf(v[i].nome, "%s_%d", nomesBase[rand() % totalNomes], rand() % 1000);
        v[i].idade = 18 + rand() % 50; // Idade entre 18 e 67
    }
}

int main() {
    srand(time(NULL)); // Para números aleatórios

    Pessoa pessoas[TAM];
    gerarPessoas(pessoas, TAM);

    printf("Ordem original:\n");
    imprimir(pessoas, TAM);

    // Bubble Sort
    double tempo = medirTempo(bubbleSort, pessoas, TAM);
    printf("Bubble Sort:\nComparacoes: %lld | Trocas: %lld | Tempo medio: %.3f ms\n\n",
        comparacoes, trocas, tempo);

    // Selection Sort
    tempo = medirTempo(selectionSort, pessoas, TAM);
    printf("Selection Sort:\nComparacoes: %lld | Trocas: %lld | Tempo medio: %.3f ms\n\n",
        comparacoes, trocas, tempo);

    // Quick Sort
    tempo = medirTempoQuickSort(pessoas, TAM);
    printf("Quick Sort:\nComparacoes: %lld | Trocas: %lld | Tempo medio: %.3f ms\n\n",
        comparacoes, trocas, tempo);

    return 0;
}
